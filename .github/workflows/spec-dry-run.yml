name: Spec Dry Run

on:
  workflow_dispatch:
    inputs:
      repos:
        description: "Comma-separated repos (e.g., lablab-bean,lablab-bean-console)"
        required: true
      base_branch:
        description: "Base branch"
        required: false
        default: "main"
  issue_comment:
    types: [created]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      repos: ${{ steps.parse-comment.outputs.repos }}
      base: ${{ steps.parse-comment.outputs.base }}
    steps:
      - uses: actions/checkout@v4
      - name: Parse comment (optional)
        id: parse-comment
        if: github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/spec dryrun')
        run: |
          BODY="${{ github.event.comment.body }}"
          REPOS=$(echo "$BODY" | sed -n 's/.*repos=\([^ ]*\).*/\1/p')
          BASE=$(echo "$BODY" | sed -n 's/.*base=\([^ ]*\).*/\1/p')
          if [ -z "$REPOS" ]; then echo "repos not found in comment"; exit 1; fi
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
          echo "base=${BASE:-main}" >> $GITHUB_OUTPUT
      - id: set-matrix
        run: |
          REPOS='${{ inputs.repos }}'
          if [ "${{ github.event_name }}" = "issue_comment" ]; then REPOS='${{ steps.parse-comment.outputs.repos }}'; fi
          export REPOS
          JSON=$(python3 -c 'import os, json; repos=[r.strip() for r in os.environ.get("REPOS",""
          ).split(",") if r.strip()]; print(json.dumps({"include":[{"repo":r} for r in repos]}))')
          echo "matrix=$JSON" >> $GITHUB_OUTPUT

  dryrun:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      ORG: ${{ vars.LABLAB_ORG }}
      REPO: ${{ matrix.repo }}
      BASE: ${{ inputs.base_branch }}
    steps:
      - name: Override base for comment
        if: github.event_name == 'issue_comment'
        run: echo "BASE=${{ needs.prepare.outputs.base }}" >> $GITHUB_ENV
      - name: Check base branch exists
        run: |
          git ls-remote --heads https://github.com/${ORG}/${REPO}.git ${BASE} | grep -q "refs/heads/${BASE}" || { echo "Missing base branch ${BASE} on ${REPO}"; exit 1; }

      - name: Check PAT push permission via API
        env:
          GH_TOKEN: ${{ secrets.LABLAB_GH_PAT }}
        run: |
          test -n "$GH_TOKEN" || { echo "LABLAB_GH_PAT secret not set"; exit 1; }
          curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${ORG}/${REPO} > resp.json
          echo "Response snippet:" && sed -n '1,40p' resp.json
          python3 -c "import json,sys; d=json.load(open('resp.json')); p=(d.get('permissions') or {}).get('push', False); print('Push permission OK' if p else ''); sys.exit(0 if p else 1)"

      - name: Report success for repo
        run: echo "Dry-run OK for ${REPO}"
