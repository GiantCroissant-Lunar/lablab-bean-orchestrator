name: Start Spec (GitHub-hosted)

on:
  workflow_dispatch:
    inputs:
      spec_id:
        description: "Spec ID"
        required: true
      slug:
        description: "Slug (e.g., tiered-architecture)"
        required: true
      repos:
        description: "Comma-separated repos (e.g., lablab-bean,lablab-bean-console)"
        required: true
      base_branch:
        description: "Base branch"
        required: false
        default: "main"
      branch_suffix:
        description: "Optional branch suffix to avoid conflicts (e.g., gh)"
        required: false
        default: ""
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  start:
    runs-on: ubuntu-latest
    env:
      ORG: ${{ vars.LABLAB_ORG }}
      SPEC_ID: ${{ inputs.spec_id }}
      SLUG: ${{ inputs.slug }}
      BASE: ${{ inputs.base_branch }}
      SUFFIX: ${{ inputs.branch_suffix }}
    steps:
      - name: Checkout orchestrator
        uses: actions/checkout@v4

      - name: Parse repo list and set matrix
        id: set-matrix
        run: |
          REPOS='${{ inputs.repos }}'
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            BODY="${{ github.event.comment.body }}"
            SID=$(echo "$BODY" | sed -n 's/.*spec_id=\([^ ]*\).*/\1/p')
            SL=$(echo "$BODY" | sed -n 's/.*slug=\([^ ]*\).*/\1/p')
            RS=$(echo "$BODY" | sed -n 's/.*repos=\([^ ]*\).*/\1/p')
            BB=$(echo "$BODY" | sed -n 's/.*base=\([^ ]*\).*/\1/p')
            if [ -n "$SID" ]; then echo "SPEC_ID=$SID" >> $GITHUB_ENV; fi
            if [ -n "$SL" ]; then echo "SLUG=$SL" >> $GITHUB_ENV; fi
            if [ -n "$BB" ]; then echo "BASE=$BB" >> $GITHUB_ENV; fi
            if [ -n "$RS" ]; then REPOS="$RS"; fi
          fi
          # Produce a JSON array for matrix
          export REPOS
          JSON=$(python3 -c 'import os, json; repos=[r.strip() for r in os.environ.get("REPOS",""
          ).split(",") if r.strip()]; print(json.dumps({"include":[{"repo":r} for r in repos]}))')
          echo "matrix=$JSON" >> $GITHUB_OUTPUT

      - name: Debug inputs and matrix
        run: |
          echo "SPEC_ID=${SPEC_ID} SLUG=${SLUG} BASE=${BASE} ORG=${ORG}"
          echo "Matrix: ${{ steps.set-matrix.outputs.matrix }}"

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  per-repo:
    needs: start
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.start.outputs.matrix) }}
    env:
      ORG: ${{ vars.LABLAB_ORG }}
      REPO: ${{ matrix.repo }}
      SPEC_ID: ${{ inputs.spec_id }}
      SLUG: ${{ inputs.slug }}
      BASE: ${{ inputs.base_branch }}
    steps:
      - name: Checkout orchestrator
        uses: actions/checkout@v4

      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ORG }}/${{ env.REPO }}
          token: ${{ secrets.LABLAB_GH_PAT }}
          path: target
          ref: ${{ env.BASE }}

      - name: Create spec branch
        working-directory: target
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          BR="spec/${SPEC_ID}-${SLUG}/${REPO}"
          if [ -n "${SUFFIX}" ]; then BR="${BR}-${SUFFIX}"; fi
          git checkout -b "$BR"
          echo "BRANCH=$BR" >> $GITHUB_ENV

      - name: Sync spec docs into repo (Spec-Kit layout)
        run: |
          set -euxo pipefail
          PADDED_ID=$(printf "%03d" ${SPEC_ID})
          SRC="specs/${PADDED_ID}-${SLUG}"
          DST="target/specs/${PADDED_ID}-${SLUG}"
          test -d "$SRC" || { echo "Spec folder not found: $SRC"; exit 1; }
          mkdir -p "$DST"
          rsync -a "$SRC/" "$DST/"

      - name: Add tiers.json/schema for app repos
        run: |
          case "$REPO" in
            lablab-bean-console|lablab-bean-windows|lablab-bean-unity)
              mkdir -p target
              cp templates/tiers/tiers.json target/tiers.json
              cp templates/tiers/tiers.schema.json target/tiers.schema.json
              ;;
            *)
              echo "No tiers.json for $REPO";;
          esac

      - name: Commit and push
        working-directory: target
        run: |
          set -euxo pipefail
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit; pushing branch to set upstream"
          else
            git commit -m "chore(spec): ${SPEC_ID}-${SLUG} sync spec docs and config"
          fi
          git push -u origin "$BRANCH" || true

      - name: Open Draft PR via API
        env:
          GH_TOKEN: ${{ secrets.LABLAB_GH_PAT }}
        run: |
          set -euxo pipefail
          TITLE="[SPEC ${SPEC_ID}] ${SLUG} (${REPO})"
          BODY="Auto-created by orchestrator. This PR syncs spec docs and initial config."
          DATA=$(jq -n \
            --arg t "$TITLE" \
            --arg h "$BRANCH" \
            --arg b "$BASE" \
            --arg body "$BODY" \
            '{title:$t, head:$h, base:$b, body:$body, draft:true}')
          curl -s -o resp.json -w '%{http_code}' \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${ORG}/${REPO}/pulls \
            -d "$DATA" | tee status.txt
          code=$(cat status.txt)
          test "$code" = "201" -o "$code" = "200" || { echo "Open PR failed: $(cat resp.json)"; exit 1; }
